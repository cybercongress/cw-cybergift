{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "new_owner": {
              "description": "NewOwner if non sent, contract gets locked. Recipients can receive gift but owner cannot register new stages.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "register_merkle_root"
      ],
      "properties": {
        "register_merkle_root": {
          "type": "object",
          "required": [
            "merkle_root"
          ],
          "properties": {
            "merkle_root": {
              "description": "MerkleRoot is hex-encoded merkle root.",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim does not check if contract has enough funds, owner must ensure it.",
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "type": "object",
          "required": [
            "claim_amount",
            "claim_msg",
            "proof",
            "signature"
          ],
          "properties": {
            "claim_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "claim_msg": {
              "$ref": "#/definitions/ClaimMsg"
            },
            "proof": {
              "description": "Proof is hex-encoded merkle proof.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "signature": {
              "$ref": "#/definitions/Binary"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "ClaimMsg": {
      "type": "object",
      "required": [
        "avatar_cid",
        "gift_claiming_address",
        "gift_claiming_address_type",
        "nickname",
        "relay_reward",
        "target_address"
      ],
      "properties": {
        "avatar_cid": {
          "type": "string"
        },
        "gift_claiming_address": {
          "type": "string"
        },
        "gift_claiming_address_type": {
          "$ref": "#/definitions/ClaimerType"
        },
        "nickname": {
          "type": "string"
        },
        "relay_reward": {
          "$ref": "#/definitions/Decimal"
        },
        "target_address": {
          "type": "string"
        }
      }
    },
    "ClaimerType": {
      "type": "string",
      "enum": [
        "ethereum",
        "cosmos"
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
